/*1) define your exception class by name "MyArithException"
(MyArithException.java)
define class "Calculator"   (Calculator.java)
In this class define a function,which will accept an int and return double of it.
e.g int caldouble(int)
This function will check an int which is passed to it
It will raise the  exception if 0 is passed or negative passed
in case of 0 caller of this method should get error message
"Zero not allowed" 
in case of negative caller of this method should get error message
"negative not allowed"
In case of positive value it should simply return the double value.
	[ this method shouldn't handle the exception]

Now define class "MyCalcApp" (MyCalcApp.java)
In this class you accept a number from user and pass that no. to
caldouble() method which is mentioned above.
*/

public class MyArithException extends Exception {
	 public MyArithException(String s)
	{
		super (s);
	}
}


public class Calculator {

		public int caldouble (int a) throws MyArithException
		{
		   if(a==0)
			   throw new MyArithException ("Zero not allowed" );
		   else if (a<0)
		       throw new MyArithException ("negative not allowed" );
		   else
			   return 2*a;
		}
}


import java.util.*;
public class MyCalcApp {

	public static void main(String[] args) {
		System.out.println("enter the number:");
		Scanner sc=new Scanner (System.in);
		int num=sc.nextInt();
		Calculator ref =new Calculator();
		try {
			int result=ref.caldouble(num);
			System.out.println(result);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("done.....");
	}
}
===================================================================================

/*2)on the developer side create an exception:
	NumberNotDivisibleBySevenException
	as a checked exception
create necessary jar and documentation.*/

public class NumberNotDivisibleBySevenException extends Exception
{
	public  NumberNotDivisibleBySevenException(String s)
	{
              super (s);
	}
}

/*on client side
	public class MyMath class with 
		public void disp(int num)
this disp() method will check if the number passed is not divisible by 7 , it will raise 
"NumberNotDivisibleBySevenException" or else it will simply display the number passed.
	[ this method shouldn't handle the exception]*/

public class MyMath 
{
	public int disp(int num)throws NumberNotDivisibleBySevenException
	{
	if (num%7!=0)
		throw new  NumberNotDivisibleBySevenException("not divisible by 7");
	else
		return num;
	//	throw new  NumberNotDivisibleBySevenException(num);
	}
}

/*public class Demo
		main function 
		invoke "disp()" of "MyMath" class.*/
import java.util.*;
public class Demo {

	public static void main(String[] args) {
		System.out.println("enter the number :");
		Scanner sc=new Scanner(System.in);
		int num=sc.nextInt();
		MyMath ref=new MyMath();
		try {
			int result=ref.disp(num);
			System.out.println(result);
		} catch (NumberNotDivisibleBySevenException e) {
			
			e.printStackTrace();
		}
	}
}
======================================================================================
//3)define "MyException" as a checked exception.

public class MyException extends Exception {
              public MyException(String s)
              {
            	  super (s);
              }
}

/*define a class "Demo" with 
	public void show1(), public void show2() , public void show3() and main functions.

inside "show3()" accept a number and if it is greater than 10 raise "MyException" else display the number.
	[ this method shouldn't handle the exception]

main() function should call "show1()" , 
show1() function should call "show2()",
show2() function should call "show3()"

show2() should not handle the exception but show1() should handle.*/

import java.util.*;
public class Demo {
	public void show1()
	{
		try {
			show2();
		} catch (MyException e) {
			
			e.printStackTrace();
		}
	}
	public void show2() throws MyException
	{
		show3();
	}
	public void show3 () throws MyException
	{
		System.out.println("enter the number ");
		Scanner sc=new Scanner(System.in);
		int num=sc.nextInt();
		if(num>10)
			throw new  MyException("number gretrethan 10");
		
			//throw new  MyException(num);
	}
	
	public static void main(String[] args) {
		Demo ref=new Demo();
		ref.show1();
	}
}
============================================================================
/*4) on the developer side create following checked exception:
	InvalidLengthException
create necessary jar file and documentation.*/

public class InvalidLengthException extends Exception {
	public InvalidLengthException(String s)
	{
		super (s);
	}
}

/*public class Authenticator
	with
a parameterized constructor which takes String as a password.
this class also will have "done()" method with "successful authentication" message.
Parameterized constructor should check the length of the password passed if it is less
 than 5 or more that 9 , it should raise "InvalidLengthException" 
	[ constructor shouldn't handle the exception]

create a class "Demo" with main
	inside main function create the object of "Authenticator" class and invoke "done()" method.*/

public class Authenticator {
	private int st;
	public Authenticator(int st)
	{
		this.st=st;
	}
	void done()throws InvalidLengthException
	{
		int len=st;
		if (len>5 && len<9)
		throw new InvalidLengthException ("successful authentication");
		else
			throw new InvalidLengthException ("lenght of password not passed");
			
	}
}

/*create a class "Demo" with main
	inside main function create the object of "Authenticator" class and invoke "done()" method.*/
public class Demo {

	public static void main(String[] args) {
		Authenticator ref=new Authenticator(7);
		try {
			ref.done();
		} catch (InvalidLengthException e) {
		
			e.printStackTrace();
		}
	}
}
==================================================================================
/*5) on the developer side 
create checked exception "ResourceNotAllocatedException"
create necessary jar file and documentation*/
public class ResourceNotAllocatedException extends Exception {
	public ResourceNotAllocatedException(String s)
	{
		super (s);
	}
}

public class MyResource implements AutoCloseable{
	public MyResource(int capacity) throws ResourceNotAllocatedException
	{
		if(capacity>100)
		{
			throw new ResourceNotAllocatedException("not sufficient space");
		}
	}
    void disp()
    {
    	System.out.println("successful");
    }
	public void close()  {
		System.out.println("resource is closed");
		
	}
}

/*on the client side
public class Demo with main function

	inside main function, create object of "MyResource" and invoke "disp()" method.*/
public class Demo {

	public static void main(String[] args) {
		MyResource ref;
		try {
			ref = new MyResource(10);
			ref.disp();
		} catch (ResourceNotAllocatedException e) {
			e.printStackTrace();
		}
	}
}
=============================================================================================

