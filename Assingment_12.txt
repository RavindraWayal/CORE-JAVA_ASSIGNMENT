/*1) accept 10 numbers from user and add them inside the ArrayList.
using ListIterator display all the numbers bidirectionally.*/
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
public class Assingment1 {

	public static void main(String[] args) {
		Scanner sc=new Scanner (System.in);
		
		List<Integer> mylist=new ArrayList<Integer>();
		for (int i=1;i<11;i++)
		{
			mylist.add(sc.nextInt());
		}
		
		ListIterator itr=mylist.listIterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
		}
		
		while(itr.hasPrevious())
		{
			System.out.println(itr.previous());
		}
	}
}

====================================================================================================
/*2) on the developer side:
	create a generic class which can accept any type
		with setters , getters and toString methods.
	create necessary jar files and  documentation.
on client side 
	create the object of above generic class and invoke its setters , getters and display the object.*/



class Demo <T>{
	private T num;

	public T getNum() {	
		return num; 
	}
	public void setNum(T num) {
		this.num = num;
	}
	public String toString() {
		return "Demo [num=" + num + "]";
	}	
}
public class Assingment2 {
	public static void main(String [] args) {
		Demo<String> ob = new Demo<>();
		 ob.setNum("hello");
		 System.out.println(ob.getNum());
	
		 Demo<Integer> ob1 = new Demo<>();
		 ob1.setNum(100);
		 System.out.println(ob1.getNum());
	}
}

==========================================================================================================
/*3) create LinkedList with the values 10,20,30 and 40.
display it.
now insert 500 in the beginning.
	insert 400 at 2nd position.
	add 1000 at the end.
display the list again.*/

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
public class Assingment3 {

	public static void main(String[] args) {
		LinkedList mylist=new LinkedList();
		
		mylist.add(10);
		mylist.add(20);
		mylist.add(30);
		mylist.add(40);
		mylist.add(50);
		
		System.out.println(mylist);
		
		mylist.addFirst(500);
		mylist.add(2,400);
		mylist.addLast(100);
		
		System.out.println(mylist);
	}

}

===================================================================================================================
/*4) add 5 numbers inside CopyOnWriteArrayList and show 
 * how can you add one more number at the same time of traversal through its iterator.*/

import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.CopyOnWriteArrayList;

public class Assingment4 {

	public static void main(String[] args)
	{
           List <Integer> mylist =new CopyOnWriteArrayList<Integer>();
		mylist.add(10);
		mylist.add(20);
		mylist.add(30);
		mylist.add(40);
		mylist.add(60);
		System.out.println("before add");
	ListIterator ltr=mylist.listIterator();
        while(ltr.hasNext())
        {
        	System.out.println(ltr.next());
        	 mylist.add(70);
        }
        
        System.out.println("after add");
       ltr=null;
       ltr=mylist.listIterator();
        while(ltr.hasNext())
        {   	 
        	System.out.println(ltr.next());
        }
          System.out.println(mylist);
}
}

================================================================================================================
/*5) create a class MyNum with
		private int num;
		parameterized constructor
Demo class with main
	create 4 objects of MyNum by passing different integers.
	store these 4 objects inside "ArrayList"
	and now store that ArrayList inside file system.
	read ArrayList from file and traverse it using Iterator.*/

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
class MyNum implements Serializable
{
	private int num;
	MyNum(int num)
	{
		this.num=num;
	}
	public String toString()
	{
		return ""+this.num;
	}
}
public class Assingment5 implements Serializable
{
	public static void main(String[] args) {
		MyNum m1=new MyNum(10);
		MyNum m2=new MyNum(20);
		MyNum m3=new MyNum(30);
		MyNum m4=new MyNum(40);
		
		List<MyNum> mylist=new ArrayList<MyNum>();
		mylist.add(m1);
		mylist.add(m2);
		mylist.add(m3);
		mylist.add(m4);
		System.out.println(mylist);
		
		try(FileOutputStream fos=new FileOutputStream("Arraylist.txt"))
		{ try(ObjectOutputStream oos=new ObjectOutputStream(fos) )
			{
			oos.writeObject(mylist);
			System.out.println("writtent succesful");
			} 
	     	catch (Exception e)
     		{
				e.printStackTrace();
			}
	    } 
	      catch (Exception e1) 
		{
			e1.printStackTrace();
		} 
		
		List<MyNum> mylist_copy=null;
		
		try(FileInputStream fis =new FileInputStream("Arraylist.txt"))
		{ try(ObjectInputStream ois=new ObjectInputStream(fis) )
			{
			mylist_copy=(ArrayList)ois.readObject();
			System.out.println(mylist_copy);
			 }
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		Iterator itr=mylist_copy.iterator();
				while(itr.hasNext())
				{
			                 System.out.println(itr.next());
	         	}
	}
}
===================================================================================================================
/*6) create a class "MyClass".
create 5 different objects of it.
add them in a ArrayList.
store ArrayList in file.
Now open a file, read ArrayList and display all objects.*/
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.ObjectInputStream;
class MyClass implements Serializable
{
	private int num;
	MyClass(int num)
	{
		this.num=num;
	}
	
	public String toString()
	{
		return ""+this.num;
	}
}
public class Assingment6 {
	public static void main(String[] args) {
		MyClass m1=new MyClass(10);
		MyClass m2=new MyClass(30);
		MyClass m3=new MyClass(30);
		MyClass m4=new MyClass(50);
		MyClass m5=new MyClass(40);
		
		ArrayList <MyClass> mylist=new ArrayList<MyClass>();
		mylist.add(m1);
		mylist.add(m2);
		mylist.add(m3);
		mylist.add(m4);
		mylist.add(m5);
		
		System.out.println(mylist);
		
		try (FileOutputStream fos=new FileOutputStream("assingment_6.txt"))
	 {
			 try(ObjectOutputStream oos=new ObjectOutputStream(fos))
	     	{
			oos.writeObject(mylist);
			System.out.println(mylist+"written succesfuly");
	        }
	    	catch(Exception e)
	    	{
			e.printStackTrace();
	    	}
	 } 
		catch (Exception e1) 
		{
		e1.printStackTrace();
        }
		
		List<MyClass> mylist1=null;
		try(FileInputStream fis =new FileInputStream("assingment_6.txt"))
		{
			try(ObjectInputStream oos=new ObjectInputStream(fis))
			{
				mylist1=(List<MyClass>) oos.readObject();
			} 
	     	catch (Exception e)
	    	{
			e.printStackTrace();
	    	}
		} 
		catch (Exception e1) 
		{
			e1.printStackTrace();
		}
		System.out.println(mylist1);
		ListIterator <MyClass> itr=mylist1.listIterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
		}	
	}
}

=====================================================================================================================
/*7) create a HashMap.
store  prn no. and students name of 10 students inside the HashMap.
display it using iterator.*/
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.*;
public class Assingment7 {
       public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		
		Map<Integer ,String> mymap=new HashMap<>();
		int prn;
		String name;
		System.out.println("Enter 4 students prn and name");
		for(int i=1;i<=4;i++)
		{
			prn=sc.nextInt();
			name=sc.next();
			mymap.put(prn, name);
		}
		Set<Entry<Integer ,String>> set=mymap.entrySet();
		Iterator itr=set.iterator();
		while(itr.hasNext())
		{
			System.out.println(itr.next());
		}
	}
}
======================================================================================================================
/*8) create a hierarchy as follows
	interface Game- play() method
	Derive at least 3 classes from it. ( Cricket, Chess and Football )
Now Create generic class which can take Game type (i.e. any sub type of Game) as parameter.
In this class try to call the play() method of the class which is passed to it.*/

interface Game
{
	void play();
}
class Cricket implements Game
{
	public void play()
	{
		System.out.println("play cricket");
	}
}
class Chess implements Game
{
	public void play()
	{
		System.out.println("play Chess");
	}
}
class Football  implements Game
{
	public void play()
	{
		System.out.println("play Football");
	}
}
class Generic<T extends Game>
{
	T ob;
	public void Caller (T ob)
	{
		ob.play();
	}
}
public class Assingment8 {

	public static void main(String[] args) {
		Generic<Game> g=new Generic <Game>();
		g.Caller(new Cricket());
		g.Caller(new Chess());
		g.Caller(new Football());
		
	}

}
==================================================================================================================
/*maintain ICC ranking of at least 5 batsmen in the "HashMap".
list should be maintain as "rank" "name"
e.g. "1" "Rohit Sharma".
Now ask any rank bet'n 1 to 5 from user. ( user input).
if user asks for a particular rank , retrieve batsman name for that rank from the HashMap.*/
import java.util.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class Assingment9 {

	public static void main(String[] args) {
		Scanner sc=new Scanner (System.in);
          Map<String, String> mymap=new HashMap<>();
          mymap.put("1","Rohit");
          mymap.put("2"," virat");
          mymap.put("3", "Dhoni");
          mymap.put("4", "suryakumar");
          mymap.put("5","Shikhar");
          
          Set<Entry<String, String>> set=mymap.entrySet();
          Iterator itr=set.iterator();
          	
          String rank=sc.next();
          
          while(itr.hasNext())
          {
        	  Map.Entry<String, String> entry = (Entry<String, String>)itr.next();
        	  if(entry.getKey().equals(rank))
        	  {
        		  System.out.println(entry.getValue());
        	  }
          }     
	}

}

========================================================================================================================
