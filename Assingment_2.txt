//1)create a class "Shape" with 2 attributes, "width" and "height". Make sure one can not access these attributes directly.
//provide accessor methods on these attributes and allow them to call from outside of your class.

public class Shape
{
  private int width,height;
  public void setMethod(int width,int height)
  {
	  this.width=width;
	  this.height=height;
	  
  }
  public int getWMethod ()
  {
	  return width;
  }
  public int getHMethod()
  {
	  return height;
  }
	public static void main(String args[])
	{
		Shape s1=new Shape();
		s1.setMethod(15,20);
		System.out.println("Height= "+s1.getHMethod());
		System.out.println("width= "+s1.getWMethod());
	
	}
}
------------------------------------------------------------------------------------
//2) Define a class "MyClass" and make sure clients can instantiate it , 
//a) without any argument
//b) with one int argument
//c) with two int arguments

public class MyClass
{
	private int a,b;
	MyClass()
	{
		
	}
	MyClass(int a)
	{
		
	}
	MyClass(int a,int b)
	{
		
	}
	public static void main(String args[])
	{
		int a=0,b=0;
		MyClass s1=new MyClass();
		MyClass s2=new MyClass(a);
		MyClass s3=new MyClass(a,b);
	}
}
---------------------------------------------------------------------------------------------
//3) Define a class "Emp" with private static member "int cnt".
//How will u make sure that outsiders can read the value of cnt ?

public class Emp
{
      private static int cnt=5;
      public static int getv()
      {
    	  return cnt;
      }

	public static void main(String args[])
	{
	    System.out.println(Emp.getv());
	}
}
------------------------------------------------------------------------------------------------
//4) Define a class "DemoOb". 
//create an instance of it.
//now create a reference and assign the reference created in the above statement.
//	Discuss what happens?
//Now since u have 2 references, take one of the reference and assign a new instance of the class.
//	Discuss what happens?
//(For ur discussion, write necessary comments in the program)
public class DemoOb
{
	public static void main(String args[])
	{
		DemoOb s=new DemoOb();
		DemoOb a=s;
		a=new DemoOb();	
	}
}
----------------------------------------------------------------------------------------------------------
//5) Define 3 classes A , B and C
//in all these classes create static and nonstatic variables as well as methods.
//	Now Define a class "Demo" ,in which define "main" function. From this main function try to access all the members of A ,B  and C.
class A
{
	private static int a=1;
	private int b=2;
	public int value()
	{
		return b;
	}
	public static int out()
	{
		return a;
	}
}
class B
{
	private static int c=3;
	public int d=4;
	public int value ()
	{
		return d;
	}
	public static int out ()
	{
		return c;
	}	
}
class C
{
	private static int e=5;
	private int f=6;
	public int value()
	{
		return f;
	}
	public static int out()
	{
		return e;
	}
}
public class DemoOb
{
	public static void main(String args[])
	{
		A s1=new A();
		B s2=new B();
		C s3=new C();
		
		System.out.println(A.out());
		System.out.println(s1.value());
		
		System.out.println(B.out());
		System.out.println(s2.value());
	
		System.out.println(C.out());
		System.out.println(s3.value());
		
	}
}
--------------------------------------------------------------------------------------------------
//6) Define 3 classes A , B and C
//in all these classes create static and nonstatic variables as well as methods.
//	Now Define a class "Demo" ,in which define "main" function. From this main function try to access all the members of A ,B  and C.
//define static initializers in the above A,B and C classes and check the order of their execution.
class A
{
	static
	{
		System.out.println("Static of class A");
	}
	private static int a=1;
	private int b=2;
	public int value()
	{
		return b;
	}
	public static int out()
	{
		return a;
	}
}

class B
{
	static 
	{
		System.out.println("Static of class B");
	}
	private static int c=3;
	public int d=4;
	public int value ()
	{
		return d;
	}
	public static int out ()
	{
		return c;
	}	
}

class C
{
	static
	{
		System.out.println("Static of class C");
	}
	private static int e=5;
	private int f=6;
	public int value()
	{
		return f;
	}
	public static int out()
	{
		return e;
	}
}

public class Demo
{
	static 
	{
		System.out.println("Static of class DemoOb");
	}
    public static void main(String args[])
	{
		A s1=new A();
		B s2=new B();
		C s3=new C();
		
		System.out.println(A.out());
		System.out.println(s1.value());
		
		System.out.println(B.out());
		System.out.println(s2.value());
	
		System.out.println(C.out());
		System.out.println(s3.value());
		
	}
}
-----------------------------------------------------------------------------------------------